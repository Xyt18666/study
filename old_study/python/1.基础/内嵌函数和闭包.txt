内嵌函数：
在函数内部 在写函数，形成嵌套

def fn():
	print('1')
	def fn2():
		print('2')
	fn2()
fn()


------------------------------------------

闭包：
如果在一个内部函数里，对外部作用域的参数进行引用时（不是在全局作用域下），
就认为是闭包

fn2 在 fn 中 ，同时引用了 fn 中的参数，所以 fn2 定义为闭包

def fn(x):
	def fn2(y):
		return x + y
	return fn2                ps:这里的 fn2 不能调用，需要返回整个函数 

fn(x)(y)


-----------------------------------------------
解决 闭包函数，不能在内部直接调用的问题：
使用 容器 把参数存起来，而不是放入栈中

def fn():
	x = [5]
	def fn2():
		x[0] *= x[0]
		return x[0]
	return fn2()            
fn()

---------------------------------------------
新的方法：
使用关键字  nonlocal  声明变量不是 局部变量

def fn():
	x = 5
	def fn2():
		nonlocal x
		x *= x
		return x
	return fn2()            
fn()

------------------------------------------------


